What is Python?

Python is a high-level, interpreted programming language known for its simplicity and readability. It supports multiple programming paradigms, including procedural, object-oriented, and functional programming.

Key Features:

Easy-to-learn: Simple syntax and readability.
Versatile: Supports various platforms and integrates well with other languages.
Rich Standard Library: Extensive built-in libraries and modules for diverse functionalities.
Community Support: Active community contributing to libraries and frameworks.
Used in: Web development (Django, Flask), data analysis (Pandas, NumPy), AI/ML (TensorFlow, PyTorch), automation, scripting, and more.
Installing Python
Steps to Install Python (Windows, macOS, Linux):

Download Python: Visit python.org and download the latest version suitable for your operating system.

Install Python:

Windows: Run the downloaded installer, select "Add Python to PATH", and follow prompts.
macOS: Open the downloaded package, follow the installation steps, and verify installation via Terminal (python3 --version).
Linux: Use package manager (sudo apt install python3 for Ubuntu) or compile from source.
Verify Installation: Open a terminal/command prompt and type python --version or python3 --version.

Set Up Virtual Environment:

Install virtualenv using pip install virtualenv.
Create a virtual environment: virtualenv venv.
Activate virtual environment:
Windows: venv\Scripts\activate
macOS/Linux: source venv/bin/activate
Python Syntax and Semantics
Hello World Program:


# Simple Python program
print("Hello, World!")
Basic Syntax Elements:

print(): Function to output text to the console.
Strings: Enclosed in quotes (" or ').
Comments: Begin with #.
Data Types and Variables
Basic Data Types:

int: Integer numbers (5, 1000).
float: Floating-point numbers (3.14, 2.718).
str: Strings ("hello", 'world').
bool: Boolean values (True, False).
Example Script:


# Variables and data types
x = 5       # integer
y = 3.14    # float
name = "Alice"  # string
is_valid = True  # boolean

# Output variables
print(x)
print(y)
print(name)
print(is_valid)
Control Structures
Conditional Statements and Loops:

if-else statement:

# Example of if-else statement
x = 10
if x > 5:
    print("x is greater than 5")
else:
    print("x is not greater than 5")
for loop:
python
Copy code
# Example of for loop
for i in range(5):
    print(i)
Functions in Python
Functions:
Functions in Python are blocks of reusable code that perform a specific task. They improve code reusability, organization, and maintainability.

Example


# Function to add two numbers
def add_numbers(a, b):
    return a + b

# Calling the function
result = add_numbers(3, 5)
print("Sum:", result)  # Output: Sum: 8
Lists and Dictionaries
Lists vs Dictionaries:

Lists: Ordered collection of items accessed by index ([1, 2, 3]).
Dictionaries: Unordered collection of key-value pairs ({'name': 'Alice', 'age': 30}).
Example Script:


# Lists and dictionaries
numbers = [1, 2, 3, 4, 5]
person = {'name': 'Alice', 'age': 30, 'city': 'New York'}

# Accessing elements
print(numbers[0])        # Output: 1
print(person['name'])    # Output: Alice

# Adding new elements
numbers.append(6)
person['job'] = 'Engineer'

# Iterating through elements
for num in numbers:
    print(num)

for key, value in person.items():
    print(key, ":", value)
Exception Handling
Exception Handling:
Exception handling in Python manages errors gracefully using try, except, and optionally finally blocks.

# Example of exception handling
try:
    result = 10 / 0
except ZeroDivisionError:
    print("Error: Division by zero")
finally:
    print("Execution completed")
Modules and Packages
Modules and Packages:

Modules: Python files containing functions, classes, and variables.
Packages: Collection of modules organized in directories.
Example using math module:


# Using the math module
import math

# Example usage
print(math.sqrt(16))    # Output: 4.0 (square root)
print(math.pi)          # Output: 3.141592653589793 (constant)

# Alias example
import math as m
print(m.factorial(5))   # Output: 120
File I/O
Reading from and Writing to Files:

Reading from a file:
python

# Reading from a file
with open('file.txt', 'r') as file:
    content = file.read()
    print(content)
Writing to a file:
python
Copy code
# Writing to a file
data = ['apple', 'banana', 'cherry']
with open('output.txt', 'w') as file:
    for item in data:
        file.write(item + '\n')
